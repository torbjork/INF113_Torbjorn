Question 2c

Successively calling malloc(1024*1024*1024) in a loop in the program without writing to the array heap_var eventually makes malloc() return NULL.
This happens fairly quickly.
 
torbjorn@torbjorn-VirtualBox:~/INF_113/Memory$ free -h
               total        used        free      shared  buff/cache   available
Mem:           1,9Gi       1,7Gi        94Mi       8,0Mi        97Mi        65Mi <--- 1.7 Gi used
Swap:          2,6Gi       936Mi       1,7Gi

After waiting a little while - the program should not be doing much as the while loop has been exited and only scanf is running:

Changing the call to malloc(1024*1024) eventually causes the process to be killed by the kernel. The printout from free -h during the run shows some more memory can be allocated:
torbjorn@torbjorn-VirtualBox:~/INF_113/Memory$ free -h
               total        used        free      shared  buff/cache   available
Mem:           1,9Gi       1,1Gi       694Mi       4,0Mi       129Mi       683Mi
Swap:          2,6Gi       659Mi       2,0Gi
torbjorn@torbjorn-VirtualBox:~/INF_113/Memory$ free -h
               total        used        free      shared  buff/cache   available
Mem:           1,9Gi       1,8Gi        71Mi       3,0Mi        67Mi        30Mi
Swap:          2,6Gi       1,7Gi       966Mi
torbjorn@torbjorn-VirtualBox:~/INF_113/Memory$ free -h
               total        used        free      shared  buff/cache   available
Mem:           1,9Gi       1,8Gi        77Mi       3,0Mi        67Mi        36Mi
Swap:          2,6Gi       1,7Gi       949Mi
torbjorn@torbjorn-VirtualBox:~/INF_113/Memory$ free -h
               total        used        free      shared  buff/cache   available
Mem:           1,9Gi       1,8Gi        77Mi       3,0Mi        67Mi        36Mi <--- 1.8 Gi used (When terminal became unresponsive)
Swap:          2,6Gi       1,7Gi       949Mi



Changing the program to write something to the array causes the process to be killed by the kernel after a fairly short time, instead of malloc() returning NULL:

torbjorn@torbjorn-VirtualBox:~/INF_113/Memory$ free -h
               total        used        free      shared  buff/cache   available
Mem:           1,9Gi       1,4Gi       413Mi       8,0Mi       156Mi       414Mi
Swap:          2,6Gi       758Mi       1,9Gi
torbjorn@torbjorn-VirtualBox:~/INF_113/Memory$ free -h
               total        used        free      shared  buff/cache   available
Mem:           1,9Gi       1,8Gi        69Mi       4,0Mi        69Mi        28Mi
Swap:          2,6Gi       1,7Gi       978Mi
torbjorn@torbjorn-VirtualBox:~/INF_113/Memory$ free -h
               total        used        free      shared  buff/cache   available
Mem:           1,9Gi       1,8Gi        71Mi       3,0Mi        70Mi        31Mi
Swap:          2,6Gi       2,1Gi       515Mi

At this point the process gets killed. The other terminal window is less than responsive so it is not easy to capture the moment when memory is full.

torbjorn@torbjorn-VirtualBox:~/INF_113/Memory$ ./mem2c 
Killed


Reducing the size of the memory call to 1KB allows the program to run much longer:

torbjorn@torbjorn-VirtualBox:~/INF_113/Memory$ free -h
               total        used        free      shared  buff/cache   available
Mem:           1,9Gi       570Mi       1,1Gi       9,0Mi       252Mi       1,2Gi
Swap:          2,6Gi       725Mi       1,9Gi
torbjorn@torbjorn-VirtualBox:~/INF_113/Memory$ free -h
               total        used        free      shared  buff/cache   available
Mem:           1,9Gi       1,0Gi       636Mi       9,0Mi       252Mi       734Mi
Swap:          2,6Gi       725Mi       1,9Gi
torbjorn@torbjorn-VirtualBox:~/INF_113/Memory$ free -h
               total        used        free      shared  buff/cache   available
Mem:           1,9Gi       1,5Gi       144Mi       9,0Mi       252Mi       242Mi
Swap:          2,6Gi       725Mi       1,9Gi
torbjorn@torbjorn-VirtualBox:~/INF_113/Memory$ free -h
               total        used        free      shared  buff/cache   available
Mem:           1,9Gi       1,8Gi        51Mi       8,0Mi        79Mi        13Mi
Swap:          2,6Gi       1,1Gi       1,6Gi
torbjorn@torbjorn-VirtualBox:~/INF_113/Memory$ free -h
               total        used        free      shared  buff/cache   available
Mem:           1,9Gi       1,8Gi        51Mi       8,0Mi        66Mi       7,0Mi
Swap:          2,6Gi       1,3Gi       1,3Gi
torbjorn@torbjorn-VirtualBox:~/INF_113/Memory$ free -h
               total        used        free      shared  buff/cache   available
Mem:           1,9Gi       1,8Gi        51Mi       8,0Mi        64Mi       5,0Mi
Swap:          2,6Gi       1,6Gi       1,1Gi
torbjorn@torbjorn-VirtualBox:~/INF_113/Memory$ free -h
               total        used        free      shared  buff/cache   available
Mem:           1,9Gi       1,8Gi        51Mi       8,0Mi        65Mi       7,0Mi
Swap:          2,6Gi       1,8Gi       816Mi
torbjorn@torbjorn-VirtualBox:~/INF_113/Memory$ free -h
               total        used        free      shared  buff/cache   available
Mem:           1,9Gi       1,8Gi        51Mi       7,0Mi        80Mi        14Mi
Swap:          2,6Gi       2,3Gi       368Mi
torbjorn@torbjorn-VirtualBox:~/INF_113/Memory$ free -h
               total        used        free      shared  buff/cache   available
Mem:           1,9Gi       1,8Gi        51Mi       7,0Mi        75Mi        12Mi
Swap:          2,6Gi       2,4Gi       201Mi
torbjorn@torbjorn-VirtualBox:~/INF_113/Memory$ free -h
               total        used        free      shared  buff/cache   available
Mem:           1,9Gi       1,8Gi        51Mi       7,0Mi        64Mi       6,0Mi <--- Almost the entire memory space is used and very little is available
Swap:          2,6Gi       2,6Gi        30Mi

At this point both terminal windows become unresponsive, and the process is killed.



